{"version":3,"sources":["assets/logo.svg","services/api.js","pages/Home/styles.js","pages/Home/index.js","pages/Example/styles.js","pages/Example/index.js","pages/NotFound/index.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","api","axios","create","Container","styled","div","Home","useState","hello","setHello","useEffect","a","get","response","data","load","src","logo","alt","message","today","date","timer","to","Example","NotFound","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","path","exact","component","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,qNCI5BC,E,OAFHC,EAAMC,S,0oBCAX,IAAMC,EAAYC,IAAOC,IAAV,KCOP,SAASC,IAAQ,IAAD,EACHC,mBAAS,MADN,mBACtBC,EADsB,KACfC,EADe,KAY7B,OATAC,oBAAU,WAAM,2CACd,4BAAAC,EAAA,qEACyBX,EAAIY,IAAI,UADjC,OACQC,EADR,OAEEJ,EAASI,EAASC,MAFpB,0CADc,uBAAC,WAAD,wBAMdC,IACC,IAGD,kBAACZ,EAAD,KACE,gCACE,yBAAKa,IAAKC,IAAMC,IAAI,SACnBV,GACC,oCACE,2BAAIA,EAAMW,SACV,2BAAIX,EAAMY,OACV,2BAAIZ,EAAMa,MACV,2BAAIb,EAAMc,QAGd,kBAAC,IAAD,CAAMC,GAAG,gBAAT,a,0nBC/BD,IAAMpB,EAAYC,IAAOC,IAAV,KCKP,SAASmB,IACtB,OACE,kBAAC,EAAD,KACE,gCACE,yBAAKR,IAAKC,IAAMC,IAAI,SACpB,kCAEG,IACD,4CACC,IAJH,uBAOA,kBAAC,IAAD,CAAMK,GAAG,QAAT,UChBO,SAASE,IACtB,OACE,oCACE,mCACA,kBAAC,IAAD,CAAMF,GAAG,QAAT,SCKC,IAAMG,EAAcC,QACI,cAA7BC,OAAOC,SAASC,UAEgB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DAuCJ,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,KC3FjEC,IAASC,OAAO,kBCCD,WACb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,OAAOC,OAAK,EAACC,UAAWlD,IACpC,kBAAC,IAAD,CAAOgD,KAAK,eAAeE,UAAWhC,IACtC,kBAAC,IAAD,CAAOgC,UAAW/B,MDNR,MAASgC,SAASC,eAAe,SDgB1C,SAAkBxB,GAEvB,GAAI,kBAAmBC,UAAW,CAGhC,GADkB,IAAIwB,IAAIC,OAAwBhC,OAAOC,SAASgC,MACpDC,SAAWlC,OAAOC,SAASiC,OAIvC,OAGFlC,OAAOmC,iBAAiB,OAAQ,WAC9B,IAAM9B,EAAK,UAAM2B,OAAN,UAEPlC,IAgEV,SAAiCO,EAAOC,GAEtC8B,MAAM/B,GACHK,KAAK,SAACzB,GAEL,IAAMoD,EAAcpD,EAASqD,QAAQtD,IAAI,gBAEnB,MAApBC,EAASsD,QACU,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG/CjC,UAAUC,cAAciC,MAAM/B,KAAK,SAACC,GAClCA,EAAa+B,aAAahC,KAAK,WAC7BV,OAAOC,SAAS0C,aAKpBvC,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,KAAK,WACjCQ,QAAQC,IACN,gHAMJf,EAAgBC,EAAOC,MC3C/BE,CAAuB,iBAAO,CAC5BY,SAAU,SAACT,GACTO,QAAQC,IAAI,WAAYR,IAE1BU,UAAW,SAACV,GACVO,QAAQC,IAAI,YAAaR,S","file":"static/js/main.44db325c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios';\n\nconst api = axios.create();\n\nexport default api;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  text-align: center;\n\n  @keyframes App-logo-spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n\n  header {\n    background-color: #282c34;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: white;\n\n    img {\n      animation: App-logo-spin infinite 20s linear;\n      height: 40vmin;\n      pointer-events: none;\n    }\n\n    a {\n      color: #61dafb;\n    }\n  }\n`;\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport logo from '../../assets/logo.svg';\n\nimport api from '../../services/api';\n\nimport { Container } from './styles';\n\nexport default function Home() {\n  const [hello, setHello] = useState(null);\n\n  useEffect(() => {\n    async function load() {\n      const response = await api.get('/hello');\n      setHello(response.data);\n    }\n\n    load();\n  }, []);\n\n  return (\n    <Container>\n      <header>\n        <img src={logo} alt=\"logo\" />\n        {hello && (\n          <>\n            <p>{hello.message}</p>\n            <p>{hello.today}</p>\n            <p>{hello.date}</p>\n            <p>{hello.timer}</p>\n          </>\n        )}\n        <Link to=\"/pwa/example\">\n          Example\n        </Link>\n      </header>\n    </Container>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  text-align: center;\n\n  @keyframes App-logo-spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n\n  header {\n    background-color: #282c34;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: white;\n\n    img {\n      animation: App-logo-spin infinite 20s linear;\n      height: 40vmin;\n      pointer-events: none;\n    }\n\n    a {\n      color: #61dafb;\n    }\n  }\n`;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport logo from '../../assets/logo.svg';\n\nimport { Container } from './styles';\n\nexport default function Example() {\n  return (\n    <Container>\n      <header>\n        <img src={logo} alt=\"logo\" />\n        <p>\n          Edit\n          {' '}\n          <code>src/App.js</code>\n          {' '}\n          and save to reload.\n        </p>\n        <Link to=\"/pwa\">\n          Home\n        </Link>\n      </header>\n    </Container>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function NotFound() {\n  return (\n    <>\n      <h1>404</h1>\n      <Link to=\"/pwa\">Home</Link>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nexport const isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n  // [::1] is the IPv6 localhost address.\n  || window.location.hostname === '[::1]'\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  || window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\nexport function register(config) {\n  // if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n            + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register(() => ({\n  onUpdate: (registration) => {\n    console.log('onUpdate', registration);\n  },\n  onSuccess: (registration) => {\n    console.log('onSuccess', registration);\n  },\n}));\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport Example from './pages/Example';\nimport NotFound from './pages/NotFound';\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <Route path=\"/pwa\" exact component={Home} />\n      <Route path=\"/pwa/example\" component={Example} />\n      <Route component={NotFound} />\n    </BrowserRouter>\n  );\n}\n"],"sourceRoot":""}